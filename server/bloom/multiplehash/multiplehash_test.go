package multiplehash_test

import (
	"crypto"
	"hash"
	"testing"

	"github.com/brianvoe/gofakeit/v6"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"server/bloom/multiplehash"

	_ "crypto/md5"

	_ "golang.org/x/crypto/blake2b"
	_ "golang.org/x/crypto/ripemd160"
)

func TestMultipleHash(t *testing.T) {
	test_object := []byte("some_random_string")

	type result struct {
		Size      int
		BlockSize int
		Hash      []byte
		Err       error
	}
	tests := []struct {
		name     string
		hashList []hash.Hash
		want     result
	}{
		{
			name: "empty",
			want: result{
				Err: multiplehash.ErrInvalidHashList,
			},
		},
		{
			name: "MD5",
			hashList: []hash.Hash{
				crypto.MD5.New(),
			},
			want: result{
				Size:      16,
				BlockSize: 64,
				Hash:      []byte{0x10, 0xc9, 0x9b, 0x4d, 0x23, 0x28, 0x15, 0x6e, 0x46, 0x59, 0x74, 0x31, 0x18, 0x2b, 0xdf, 0x1b},
			},
		},
		{
			name: "SHA512",
			hashList: []hash.Hash{
				crypto.SHA512.New(),
			},
			want: result{
				Size:      64,
				BlockSize: 128,
				Hash:      []byte{0xd7, 0x71, 0x35, 0xa, 0xe8, 0xdd, 0x15, 0x9, 0xbb, 0x97, 0x34, 0xac, 0x34, 0x9b, 0xc8, 0x89, 0xb7, 0xe7, 0x81, 0xaa, 0xe5, 0xbc, 0x63, 0xa8, 0x26, 0x2d, 0x40, 0xe9, 0x62, 0xfa, 0x9b, 0xc, 0xe0, 0xdc, 0x23, 0xb5, 0x9d, 0xbc, 0x10, 0x18, 0xf3, 0xbe, 0x13, 0x4c, 0x6a, 0x8a, 0xa5, 0x2, 0x8a, 0xbf, 0x86, 0x48, 0x3b, 0x6b, 0xea, 0xdb, 0xd6, 0xbc, 0xf, 0xf5, 0x76, 0x3b, 0x26, 0x79},
			},
		},
		{
			name: "RIPEMD160",
			hashList: []hash.Hash{
				crypto.RIPEMD160.New(),
			},
			want: result{
				Size:      20,
				BlockSize: 64,
				Hash:      []byte{0x86, 0x9e, 0x5f, 0x2f, 0xa, 0x5e, 0x98, 0x5a, 0x45, 0xc4, 0x23, 0x3b, 0xb5, 0x84, 0x85, 0x8c, 0xab, 0x5e, 0x10, 0xb1},
			},
		},
		{
			name: "BLAKE2b_512",
			hashList: []hash.Hash{
				crypto.BLAKE2b_512.New(),
			},
			want: result{
				Size:      64,
				BlockSize: 128,
				Hash:      []byte{0xd4, 0x2e, 0x91, 0x42, 0x70, 0xad, 0x8d, 0xf1, 0xc0, 0x6, 0xcc, 0x59, 0xb7, 0x77, 0x71, 0x4b, 0xe4, 0x4f, 0xf8, 0xc8, 0x77, 0x57, 0x87, 0x14, 0xba, 0x5e, 0x38, 0xf4, 0x13, 0x52, 0x5a, 0xc, 0x32, 0x31, 0x7d, 0x88, 0x83, 0x8f, 0x95, 0xf5, 0x88, 0x79, 0xe3, 0x15, 0x1d, 0xbf, 0x37, 0xeb, 0x52, 0xfb, 0x92, 0x7a, 0xfd, 0xe4, 0xe, 0x70, 0x27, 0xef, 0x40, 0x8, 0xcd, 0xd2, 0xa3, 0xa},
			},
		},
		{
			name: "MD5+SHA512+RIPEMD160+BLAKE2b_512",
			hashList: []hash.Hash{
				crypto.MD5.New(),
				crypto.SHA512.New(),
				crypto.RIPEMD160.New(),
				crypto.BLAKE2b_512.New(),
			},
			want: result{
				Size:      164,
				BlockSize: 384,
				Hash:      []byte{0x10, 0xc9, 0x9b, 0x4d, 0x23, 0x28, 0x15, 0x6e, 0x46, 0x59, 0x74, 0x31, 0x18, 0x2b, 0xdf, 0x1b, 0xd7, 0x71, 0x35, 0xa, 0xe8, 0xdd, 0x15, 0x9, 0xbb, 0x97, 0x34, 0xac, 0x34, 0x9b, 0xc8, 0x89, 0xb7, 0xe7, 0x81, 0xaa, 0xe5, 0xbc, 0x63, 0xa8, 0x26, 0x2d, 0x40, 0xe9, 0x62, 0xfa, 0x9b, 0xc, 0xe0, 0xdc, 0x23, 0xb5, 0x9d, 0xbc, 0x10, 0x18, 0xf3, 0xbe, 0x13, 0x4c, 0x6a, 0x8a, 0xa5, 0x2, 0x8a, 0xbf, 0x86, 0x48, 0x3b, 0x6b, 0xea, 0xdb, 0xd6, 0xbc, 0xf, 0xf5, 0x76, 0x3b, 0x26, 0x79, 0x86, 0x9e, 0x5f, 0x2f, 0xa, 0x5e, 0x98, 0x5a, 0x45, 0xc4, 0x23, 0x3b, 0xb5, 0x84, 0x85, 0x8c, 0xab, 0x5e, 0x10, 0xb1, 0xd4, 0x2e, 0x91, 0x42, 0x70, 0xad, 0x8d, 0xf1, 0xc0, 0x6, 0xcc, 0x59, 0xb7, 0x77, 0x71, 0x4b, 0xe4, 0x4f, 0xf8, 0xc8, 0x77, 0x57, 0x87, 0x14, 0xba, 0x5e, 0x38, 0xf4, 0x13, 0x52, 0x5a, 0xc, 0x32, 0x31, 0x7d, 0x88, 0x83, 0x8f, 0x95, 0xf5, 0x88, 0x79, 0xe3, 0x15, 0x1d, 0xbf, 0x37, 0xeb, 0x52, 0xfb, 0x92, 0x7a, 0xfd, 0xe4, 0xe, 0x70, 0x27, 0xef, 0x40, 0x8, 0xcd, 0xd2, 0xa3, 0xa},
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			got, err := multiplehash.New(tt.hashList...)

			if tt.want.Err != nil {
				assert.ErrorIs(t, tt.want.Err, err)
				return
			}

			assert.NoError(t, err)
			assert.NotNil(t, got)

			assert.Equal(t, tt.want.Size, got.Size(), "Size")
			assert.Equal(t, tt.want.BlockSize, got.BlockSize(), "BlockSize")

			n, err := got.Write(test_object)
			assert.NoError(t, err)
			assert.Equal(t, len(test_object), n, "Expected full write")

			hash := got.Sum(nil)
			assert.Equalf(t, tt.want.Hash, hash, "Expected hash differ")
		})
	}
}

func BenchmarkMultipleHash(b *testing.B) {
	tests := []struct {
		name     string
		hashList []hash.Hash
	}{
		{
			name: "MD5",
			hashList: []hash.Hash{
				crypto.MD5.New(),
			},
		},
		{
			name: "SHA512",
			hashList: []hash.Hash{
				crypto.SHA512.New(),
			},
		},
		{
			name: "SHA512x2",
			hashList: []hash.Hash{
				crypto.SHA512.New(),
				crypto.SHA512.New(),
			},
		},
		{
			name: "SHA512x8",
			hashList: []hash.Hash{
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
				crypto.SHA512.New(),
			},
		},
		{
			name: "RIPEMD160",
			hashList: []hash.Hash{
				crypto.RIPEMD160.New(),
			},
		},
		{
			name: "BLAKE2b_512",
			hashList: []hash.Hash{
				crypto.BLAKE2b_512.New(),
			},
		},
		{
			name: "BLAKE2b_512x2",
			hashList: []hash.Hash{
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
			},
		},
		{
			name: "BLAKE2b_512x8",
			hashList: []hash.Hash{
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
				crypto.BLAKE2b_512.New(),
			},
		},
		{
			name: "MD5+SHA512+RIPEMD160+BLAKE2b_512",
			hashList: []hash.Hash{
				crypto.MD5.New(),
				crypto.SHA512.New(),
				crypto.RIPEMD160.New(),
				crypto.BLAKE2b_512.New(),
			},
		},
	}
	for name, test_object := range map[string][]byte{
		"string": []byte("some_random_string"),
		"URL":    []byte(gofakeit.URL()),
		"uuid":   []byte(gofakeit.UUID()),
	} {
		test_object := test_object
		b.Run(name, func(b *testing.B) {
			for _, tt := range tests {
				tt := tt
				b.Run(tt.name, func(b *testing.B) {
					b.SetBytes(int64(len(test_object)))

					got, err := multiplehash.New(tt.hashList...)
					require.NoError(b, err)

					b.ResetTimer()

					for n := 0; n < b.N; n++ {
						got.Reset()
						got.Write(test_object) // nolint: errcheck
						got.Sum(nil)
					}
				})
			}
		})
	}
}
