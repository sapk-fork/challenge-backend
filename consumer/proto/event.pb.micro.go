// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: event.proto

package event

import (
	fmt "fmt"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for API service

func NewAPIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for API service

type APIService interface {
	Handle(ctx context.Context, in *Event, opts ...client.CallOption) (*Response, error)
	AddURL(ctx context.Context, in *UserURL, opts ...client.CallOption) (*Response, error)
	ContainURL(ctx context.Context, in *UserURL, opts ...client.CallOption) (*Response, error)
}

type aPIService struct {
	c    client.Client
	name string
}

func NewAPIService(name string, c client.Client) APIService {
	return &aPIService{
		c:    c,
		name: name,
	}
}

func (c *aPIService) Handle(ctx context.Context, in *Event, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "API.Handle", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIService) AddURL(ctx context.Context, in *UserURL, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "API.AddURL", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIService) ContainURL(ctx context.Context, in *UserURL, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "API.ContainURL", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIHandler interface {
	Handle(context.Context, *Event, *Response) error
	AddURL(context.Context, *UserURL, *Response) error
	ContainURL(context.Context, *UserURL, *Response) error
}

func RegisterAPIHandler(s server.Server, hdlr APIHandler, opts ...server.HandlerOption) error {
	type aPI interface {
		Handle(ctx context.Context, in *Event, out *Response) error
		AddURL(ctx context.Context, in *UserURL, out *Response) error
		ContainURL(ctx context.Context, in *UserURL, out *Response) error
	}
	type API struct {
		aPI
	}
	h := &aPIHandler{hdlr}
	return s.Handle(s.NewHandler(&API{h}, opts...))
}

type aPIHandler struct {
	APIHandler
}

func (h *aPIHandler) Handle(ctx context.Context, in *Event, out *Response) error {
	return h.APIHandler.Handle(ctx, in, out)
}

func (h *aPIHandler) AddURL(ctx context.Context, in *UserURL, out *Response) error {
	return h.APIHandler.AddURL(ctx, in, out)
}

func (h *aPIHandler) ContainURL(ctx context.Context, in *UserURL, out *Response) error {
	return h.APIHandler.ContainURL(ctx, in, out)
}
